import _         from 'lodash';
import Joi       from 'joi';

export default function (model, { omitAutoGenerated = false } = {}) {
    let keys = {};

    let attributes = model.attributes;
    if (omitAutoGenerated) {
        attributes = _.pickBy(attributes, (attribute) => { return !attribute._autoGenerated; });
    }

    _.each(attributes, (attribute, name) => {
        let joi;

        switch (attribute.type.key) {
        case 'BLOB':
            joi = Joi.any();
            break;
        case 'BOOLEAN':
            joi = Joi.boolean();
            break;
        case 'BIGINT':
        case 'ENUM':
            joi = Joi.string().allow(attribute.values);
            break;
        case 'INTEGER':
            joi = Joi.number().integer();
            break;
        case 'DECIMAL':
        case 'DOUBLE':
        case 'FLOAT':
            joi = Joi.number();
            break;
        case 'JSON':
        case 'JSONB':
            joi = Joi.object();
            break;
        case 'STRING':
        case 'TEXT':
            joi = Joi.string();
            break;
        case 'DATE':
            joi = Joi.date();
            break;
        case 'UUID':
            joi = Joi.string().guid();
            break;
        }

        if (attribute.comment) {
            joi.description(attribute.comment);
        }

        if (!attribute.allowNull) {
            joi.required();
        }

        if (attribute.defaultValue && !_.isObject(attribute.defaultValue)) {
            joi.default(attribute.defaultValue);
        }

        _.each(attribute.validate, (value, key) => {
            if (!value) {
                return;
            }

            switch (key) {
            case 'is':
                joi.regex(value);
                break;
            case 'isEmail':
                joi.email();
                break;
            case 'isUrl':
                joi.uri();
                break;
            case 'isIP':
                joi.ip();
                break;
            case 'isIPv4':
                joi.ip({ version: ['ipv4'] });
                break;
            case 'isIPv6':
                joi.ip({ version: ['ipv6'] });
                break;
            case 'min':
                joi.minimum(value);
                break;
            case 'max':
                joi.maximum(value);
                break;
            }
        });

        keys[name] = joi;
    });

    return Joi.object().keys(keys);
}
